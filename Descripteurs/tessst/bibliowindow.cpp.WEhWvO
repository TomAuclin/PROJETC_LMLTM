#include "bibliowindow.h"
#include "ui_biblioWindow.h"

#include <QFileDialog>
#include <QListWidgetItem>
#include <QPixmap>
#include <QIcon>
#include <QMessageBox>
#include <QDir>
#include <QDebug>
#include <QMouseEvent>

BiblioWindow::BiblioWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::BiblioWindow)
{
    ui->setupUi(this);

    // Configurer le QListWidget pour afficher en mosaïque
    ui->AffichageBiblio->setViewMode(QListWidget::IconMode);
    ui->AffichageBiblio->setResizeMode(QListWidget::Adjust);
    ui->AffichageBiblio->setMovement(QListWidget::Static);
    ui->AffichageBiblio->setSpacing(10);

    ui->TraitementButton->setVisible(false);
    ui->DetailsButton->setVisible(false);


    // Connecter le clic sur une image
    connect(ui->AffichageBiblio, &QListWidget::itemClicked, this, &BiblioWindow::on_AffichageBiblio_itemClicked);
}

BiblioWindow::~BiblioWindow()
{
    delete ui;
}

void BiblioWindow::on_ChargerBiblioButton_clicked()
{
    QString directoryPath = QFileDialog::getExistingDirectory(this, "Sélectionnez un dossier d'images");

    if (directoryPath.isEmpty()) {
        qDebug() << "Aucun dossier sélectionné.";
        return;
    }

    loadImagesIntoList(directoryPath);
}

void BiblioWindow::loadImagesIntoList(const QString &directoryPath)
{
    ui->AffichageBiblio->clear();

    QDir dir(directoryPath);
    QStringList imageFiles = dir.entryList(QStringList() << "*.png" << "*.CR2" << "*.pgm", QDir::Files);

    if (imageFiles.isEmpty()) {
        QMessageBox::information(this, "Aucune image", "Le dossier sélectionné ne contient aucune image.");
        return;
    }

    const QSize iconSize(150, 150);

    foreach (const QString &fileName, imageFiles) {
        QString filePath = directoryPath + "/" + fileName;
        QPixmap pixmap(filePath);

        if (!pixmap.isNull()) {
            QListWidgetItem *item = new QListWidgetItem();
            item->setIcon(QIcon(pixmap.scaled(iconSize, Qt::KeepAspectRatio, Qt::SmoothTransformation)));
            item->setData(Qt::UserRole, filePath);
            item->setSizeHint(iconSize);

            ui->AffichageBiblio->addItem(item);
        } else {
            qDebug() << "Impossible de charger l'image : " << filePath;
        }
    }

    ui->AffichageBiblio->setIconSize(iconSize);
}

void BiblioWindow::on_AffichageBiblio_itemClicked(QListWidgetItem *item)
{
    QString filePath = item->data(Qt::UserRole).toString();
    qDebug() << "Image cliquée : " << filePath;

    selectedImagePath = filePath; // Stocker le chemin de l'image sélectionnée

    // Rendre le bouton de traitement visible
    ui->TraitementButton->setVisible(true);
    ui->DetailsButton->setVisible(true);
}

void BiblioWindow::on_TraitementButton_clicked()
{
    if (!selectedImagePath.isEmpty()) {
        qDebug() << "Traitement de l'image : " << selectedImagePath;

        // Créer une instance de MainWindow si elle n'existe pas encore
        if (!mainWindow) {
            mainWindow = std::make_unique<MainWindow>(this); // Crée une instance avec BiblioWindow comme parent
        }

        // Afficher MainWindow
        mainWindow->show();

        // Fermez la fenêtre actuelle :
        this->close();
    } else {
        QMessageBox::warning(this, "Avertissement", "Aucune image sélectionnée !");
    }
}

void BiblioWindow::mousePressEvent(QMouseEvent *event)
{
    // Si le clic est en dehors de QListWidget, désélectionner l'image
    if (!ui->AffichageBiblio->geometry().contains(event->pos())) {
        ui->AffichageBiblio->clearSelection();
        selectedImagePath.clear();
        ui->TraitementButton->setVisible(false); // Masquer le bouton traitement
        ui->DetailsButton->setVisible(false); // Masquer le bouton details
    }

    QMainWindow::mousePressEvent(event);
}
