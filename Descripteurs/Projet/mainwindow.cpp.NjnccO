#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QGraphicsPixmapItem>
#include <QFileDialog>
#include <QPixmap>
#include <QMessageBox>
#include <QGraphicsRectItem>
#include <QPainter>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), ui(new Ui::MainWindow), scene(new QGraphicsScene(this))
{
    ui->setupUi(this);
    ui->AfficherImage->setScene(scene);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_ChargerImage_clicked()
{
    // Ouvrir un QFileDialog pour que l'utilisateur choisisse une image
    QString fileName = QFileDialog::getOpenFileName(this, tr("Charger une image"), "", tr("Images (*.png *.jpg *.bmp *.jpeg)"));

    if (!fileName.isEmpty()) {
        // Créer un QPixmap à partir du fichier sélectionné
        QPixmap pixmap(fileName);

        if (!pixmap.isNull()) {
            scene->clear();  // Nettoyer la scène avant d'ajouter une nouvelle image
            QGraphicsPixmapItem *item = new QGraphicsPixmapItem(pixmap);
            scene->addItem(item);
            ui->AfficherImage->setScene(scene); // Réaffecter la scène au QGraphicsView

            // Convertir l'image en QImage pour traitement
            image = pixmap.toImage();
        } else {
            QMessageBox::warning(this, tr("Erreur"), tr("L'image n'a pas pu être chargée."));
        }
    }
}

void MainWindow::on_CalculeHisto_clicked()
{
    if (image.isNull()) {
        QMessageBox::warning(this, tr("Erreur"), tr("Aucune image chargée."));
        return;
    }

    // Réinitialiser les histogrammes
    for (int i = 0; i < 256; ++i) {
        histoGris[i] = 0;
        histoCouleur.rouge[i] = 0;
        histoCouleur.vert[i] = 0;
        histoCouleur.bleu[i] = 0;
    }

    // Convertir l'image en niveaux de gris ou couleur pour histogramme
    if (image.format() == QImage::Format_RGB888) {
        // Calculer l'histogramme couleur
        std::vector<std::vector<std::array<uint8_t, 3>>> imageCouleur(image.height(), std::vector<std::array<uint8_t, 3>>(image.width()));

        for (int y = 0; y < image.height(); ++y) {
            for (int x = 0; x < image.width(); ++x) {
                QColor color(image.pixel(x, y));
                imageCouleur[y][x] = { static_cast<unsigned char>(color.red()), color.green(), color.blue() };
            }
        }

        Histogramme::calculerHistogrammeCouleur(imageCouleur, histoCouleur);
    } else {
        // Calculer l'histogramme en niveaux de gris
        std::vector<std::vector<uint8_t>> imageGris(image.height(), std::vector<uint8_t>(image.width()));

        for (int y = 0; y < image.height(); ++y) {
            for (int x = 0; x < image.width(); ++x) {
                QColor color(image.pixel(x, y));
                uint8_t gray = qGray(color.rgb());
                imageGris[y][x] = gray;
            }
        }

        Histogramme::calculerHistogrammeGris(imageGris, histoGris);
    }

    // Après calcul, afficher l'histogramme dans le QGraphicsView
    on_AfficherHistogramme_rubberBandChanged(QRect(), QPointF(), QPointF());
}

void MainWindow::on_AfficherHistogramme_rubberBandChanged(const QRect &viewportRect, const QPointF &fromScenePoint, const QPointF &toScenePoint)
{
    if (image.isNull()) {
        return;
    }

    // Créer un graphique de l'histogramme
    QGraphicsScene *histoScene = new QGraphicsScene(this);
    int width = 256;
    int height = 100;  // Hauteur de l'histogramme

    // Si l'histogramme est couleur
    if (histoCouleur.rouge[0] > 0 || histoCouleur.vert[0] > 0 || histoCouleur.bleu[0] > 0) {
        QPainterPath pathRouge, pathVert, pathBleu;
        for (int i = 0; i < 256; ++i) {
            pathRouge.moveTo(i, height - histoCouleur.rouge[i] / 10);
            pathRouge.lineTo(i, height);
            pathVert.moveTo(i, height - histoCouleur.vert[i] / 10);
            pathVert.lineTo(i, height);
            pathBleu.moveTo(i, height - histoCouleur.bleu[i] / 10);
            pathBleu.lineTo(i, height);
        }

        histoScene->addPath(pathRouge, QPen(Qt::red));
        histoScene->addPath(pathVert, QPen(Qt::green));
        histoScene->addPath(pathBleu, QPen(Qt::blue));

    } else {  // Si c'est un histogramme en niveaux de gris
        QPainterPath path;
        for (int i = 0; i < 256; ++i) {
            path.moveTo(i, height - histoGris[i] / 10);
            path.lineTo(i, height);
        }

        histoScene->addPath(path, QPen(Qt::black));
    }

    ui->AfficherHisto->setScene(histoScene);
}
